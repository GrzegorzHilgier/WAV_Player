
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/signal.h>
#include <inttypes.h>
#include <avr/iom16.h>
#include <util/delay.h>


#define wlacz PORTB &= ~(1 << PB4)		//ustaw SS w stan niski-wlacz karte
#define wylacz PORTB |= (1 << PB4)		//ustaw SS w stan wysoki-wylacz karte

unsigned char sd_error = 1;						//1 oznacza brak karty
unsigned char bufor[256];						//dwa buffory do zczytywania danych z karty oraz wysylania na glosnik
unsigned char bufor1[256];
unsigned char flaga256, flaga512;
int licznik;
	uint32_t adres_pliku[20];
unsigned char nr_pliku;
	
	

void konfiguracja_spi(void)			//KONFIGURACJA SPI
{	
	DDRB &= ~(1 << PB6);			// pin 7(miso) wejscie
	DDRB |= (1 << PB4);			// pin 5(SS) wyjscie
	DDRB |= (1 << PB5);			// pin 6(mosi) wyjscie 
	DDRB |= (1 << PB7);			// pin 7(SCK) wyjscie
	SPCR = (1 << SPE) | (1 << MSTR) ;  // SPE-wlaczenie SPI , MSTR- tryb master, predkosc F/128
}


unsigned char bajt_ms(unsigned char dane) 					//WYSLANIE I ODBIOR BAJTU
{  _delay_ms(3);
	unsigned char odebrane = 0;
	SPDR = dane;
	while(!(SPSR & (1<<SPIF)));
	SPSR |= (1<<SPIF);
	odebrane = SPDR;
	return (odebrane);
}

unsigned char bajt(unsigned char dane) 					//WYSLANIE I ODBIOR BAJTU
{  
	unsigned char odebrane = 0;
	SPDR = dane;
	while(!(SPSR & (1<<SPIF)));
	SPSR |= (1<<SPIF);
	odebrane = SPDR;
	return (odebrane);
}

unsigned char komenda_ms(unsigned char nazwa, uint16_t argH, uint16_t argL, unsigned char CRC )			//wyslanie komendy [6 bit nazwa, 32 bit argument, 8 bit CRC]
{	
	bajt_ms(0xFF);																//nazwe tworzy sie przez 11CMDx 
	bajt_ms(nazwa);
	bajt_ms((uint8_t)(argH >> 8));
	bajt_ms((uint8_t)argH);
	bajt_ms((uint8_t)(argL >> 8));
	bajt_ms((uint8_t)argL);
	bajt_ms(CRC);
	bajt_ms(0xFF);
	return bajt_ms(0xFF);	
}

unsigned char komenda(unsigned char nazwa, uint16_t argH, uint16_t argL, unsigned char CRC )			//wyslanie komendy [6 bit nazwa, 32 bit argument, 8 bit CRC]
{	
	bajt(0xFF);																//nazwe tworzy sie przez 11CMDx 
	bajt(nazwa);
	bajt((uint8_t)(argH >> 8));
	bajt((uint8_t)argH);
	bajt((uint8_t)(argL >> 8));
	bajt((uint8_t)argL);
	bajt(CRC);
	bajt(0xFF);
	return bajt(0xFF);	
}



int wlacz_sd(void) 						//WLACZENIE KARTY							
{ 			
	unsigned char i,j;
	unsigned char odebrane;
	for(i=0;i<16;i++)
	{
		wylacz; 													//SS w stan wysoki, potem wyslanie 80 impuslow zegara co
		for(j=0; j < 10; j++) bajt_ms(0xFF); 							//powoduje reset karty
		wlacz; 
		odebrane = komenda_ms(0x40,0,0,0x95);							// wyslanie komendy SMD0 co wprowadza karte w idle state
		if(odebrane == 0x01) break;
		else if(i == 15) {sd_error = 1; return(0);}									
	}	
	
	
	
	
	wylacz;
	wlacz;
	
	for(i=0;i<16;i++)
	{
		odebrane = komenda_ms(0x41,0,0,0xFF);							// wysylamy CMD1 tutaj nie potrzebne crc, karta wychodzi z idle 
		if(odebrane == 0x00) break;
		else if(i == 15) {sd_error = 1; return(0);}	
	}
	
	
	
	wylacz;
	
	
	/*
	wlacz;
	komenda(0x77,0,0,0xFF);							//CMD55 -informuje ze nastepna komenda bedzie ACMD
	


	for(i=0;i<16;i++)
	{
		odebrane = komenda(0x69,0,0,0xFF);							// ACMD41
		if(odebrane == 0x00) break;
		else if(i == 15) {sd_error = 1; return(0);}	
	}	wylacz;
	*/
	sd_error = 0;
	
return(0);
}









uint8_t sektor(uint32_t adres,uint8_t* bufor)
{
	uint32_t adres_sektora;
	adres_sektora = adres << 8; 		//adres_sektora jest krotnoscia 256

	int i;
	


	wlacz;
	komenda(0x51,(uint16_t)(adres_sektora >> 16),(uint16_t) adres_sektora,0xFF);

	while(bajt(0xFF) != (char)0xFE);

	for(i=0; i<256; i++)
    *bufor++ = bajt(0xFF);

	bajt(0xFF);
	bajt(0xFF);
	wylacz;

	return(0);
}




	
void fat16(void)
{
	sektor(1,bufor);
	uint32_t adres_partycji;
	adres_partycji |= bufor[201];
	adres_partycji=adres_partycji<<8;                               //pobranie adresu partycji
	adres_partycji |= bufor[200];
	adres_partycji=adres_partycji<<8;
	adres_partycji |= bufor[199];
	adres_partycji=adres_partycji<<8;
	adres_partycji |= bufor[198];
	
	sektor(adres_partycji << 1,bufor); 	// POBRANIE BPB
/// PARE waznych danych


	
	
//	uint16_t bajty_na_sektor = (bufor[12]<<8) + bufor[11];				
	uint8_t sektory_na_klaster = bufor[13];							
	uint16_t sektory_zarezerw = (bufor[15]<<8) + bufor[14];
	uint8_t kopie_alokacji = bufor[16];
//	uint16_t wpisy_katalogu = (bufor[18]<<8) + bufor[17];
	uint16_t sektory_tabl_alok = (bufor[23]<<8) + bufor[22];
	uint32_t adres_katalogu = adres_partycji +sektory_zarezerw + (kopie_alokacji * sektory_tabl_alok);

	uint32_t klaster_pliku;
	nr_pliku=0;
	int i,j;
	for(i=0; i<64;i++)							//przeszukanie katalogu glownego w celu znalezienia plikow wav
	{
		int k = 0;
		sektor((adres_katalogu << 1) + i,bufor);						
		for(j=0;j<8;j++)
		{
			if((bufor[k+8] == 0x57) && (bufor[k+9] == 0x41) && (bufor[k+10] == 0x56) && ((bufor[k+26] != 0) || (bufor[k+27] != 0)))
				{
					klaster_pliku |= bufor[k+27];
					klaster_pliku = klaster_pliku<<8;
					klaster_pliku |= bufor[k+26];
					adres_pliku[nr_pliku] = adres_katalogu + 32 + sektory_na_klaster*(klaster_pliku - 2); 

					nr_pliku++;
					klaster_pliku=0;
				}
			k = k+32;
		}	
	
	}
	
	
	
	


}

int plik(uint32_t adres)
{	
	uint32_t k=2;
	
	flaga256=0;
	flaga512=0;
	
	uint32_t rozmiar_pliku = 0;
	sektor(adres,bufor);
	sektor(adres+1,bufor1);
	char i;
	for(i=10;i<100;i++)
	{
		if((bufor[i] == 0x64) && (bufor[i+1] == 0x61) && (bufor[i+2] == 0x74) && (bufor[i+3] == 0x61))
		{	
			rozmiar_pliku |= bufor[i+7];
			rozmiar_pliku=rozmiar_pliku<<8;
			rozmiar_pliku |= bufor[i+6];
			rozmiar_pliku=rozmiar_pliku<<8;
			rozmiar_pliku |= bufor[i+5];
			rozmiar_pliku=rozmiar_pliku<<8;
			rozmiar_pliku |= bufor[i+4];
			
			licznik = i+7+10;
			
		
		}
	}
	

		


	SREG |= 0X80;
	TIMSK |= 0x01;					//INICJACJA PRZERWANIA T0
	TCCR0 = 0x02;
	
	for(;;)
	{	
		if(flaga256 == 1)
		{	
			sektor(adres+k,bufor);
			flaga256=0;
			k++;
			
		}
		
		if(flaga512 == 1)
		{	
			sektor(adres+k,bufor1);
			flaga512 = 0;
			k++;
			
		}
		
		if((k*256) > rozmiar_pliku)
		{	
			
			
			TCCR0 = 0x00;
			TIMSK &= 0xFE;
			return(0);
			
			
		}
	}
}
SIGNAL (SIG_OVERFLOW0) 					//PRZERWANIE WEWNETRZNE
{	
	TCNT0 = 198;
	if(licznik < 256) PORTC = bufor[licznik];
	else if(licznik == 256) {flaga256=1; PORTC = bufor1[licznik-256]; }
	else if(licznik < 512) PORTC = bufor1[licznik-256]; 
	licznik++;
	 if(licznik == 512){ flaga512=1; licznik = 0;}
	


}





void program(void)						//PROGRAM GLOWNY
{		
	konfiguracja_spi();
	wlacz_sd();
	wlacz;
	komenda(0x50,0,256,0xFF);
	bajt(0xff);
	wylacz;
	if(sd_error == 0)
	fat16();
	else if(sd_error == 1);
	



}


/*SIGNAL (SIG_INTERRUPT1) 				//PRZERWANIE ZEWNETRZNE INT0
	{	GICR &= 0X1F;
		_delay_ms(100);					
		SREG |= 0X80;
		plik(adres_pliku[nr_pliku] << 1);
		
		nr_pliku++;
		if(nr_pliku ==4) nr_pliku =0;
		GICR |= 0XA0;
	}	*/
	

	




int main(void) 							//INICJACJE PORTOW(BEZ SPI) I PRZERWAN OD CZUJNIKOW
	{   								//konfiguracja wejscy wyjsc
		DDRC = 0xFF;
		
		nr_pliku = 0;
		MCUCSR |= (1<<JTD); 
		MCUCSR |= (1<<JTD);
		PORTB |= 0X04;					// wlaczenie przycisku intT2
		PORTD |= 0X0F;
		program();
		PORTD=0XFF;
		unsigned char i=0;
		
		while(1)
		{
			if((!(PINB&(1<<2))) || (!(PIND&(1<<2))) || (!(PIND&(1<<3))))
			{
			plik(adres_pliku[i] << 1);
		
			i++;
			if(i==nr_pliku) i =0;

				
			}
			
			
		} 
		
	}